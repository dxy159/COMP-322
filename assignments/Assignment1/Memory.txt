PART 1

1) 
Answer: "not equal"
When x (the first parameter) gets passed into the function, it is passed by value. That means that 'a' that exists within the function has a different address as it is stored somewhere else in memory, where b is the address of 'x' in the main function. Therefore, a does not equal b.

2) 
Answer: "equal"
Both functions return an address to a local variable within the function. But because the variable is local, it only exists within the function, that means it does not exist anymore when the function finishes execution. This means that when func1 gets called, it will assign the local variable 'x' to memory, then gets erased. Now, when func2 gets called, a new 'x' is declared, but since the 'x' in func1 was erased off memory, the 'x' in func2 gets stored at the same address as the 'x' in func1. This results in both functions returning the same address.

3)
No, it is not good memory management, and it will lead to a run-time error. This is because the pointer q, was never allocated to memory with "new" or malloc, so deleting it from memory is not allowed.

4)
Yes, the snippet of code would be of good memory management. This is because only p was allocated to memory with 'new' and only p was deallocated with 'delete'. Because q was never allocated to memory, assigning it to be NULL would not cause any errors.

5)
Firstly, there will be a segmentation fault error because name is only assigned to hold 10 characters, whereas '12345678910' has 11. Because x is never changed in this question, it will still hold the value of 0. So if the segmentation error is fixed, the console will simply print "0 ".